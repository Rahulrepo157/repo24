import numpy as np
import string


def remove_punctuation(s):
  """
  Removes all punctuation from the given string.

  Args:
    s: The string to be processed.

  Returns:
    The string with all punctuation removed.
  """

  return s.translate(str.maketrans('', '', string.punctuation))


def train_model():
  """
  Trains the Markov chain model.

  Returns:
    The trained Markov chain model.
  """

  # Initialize the transition probabilities.
  initial = {}
  first_order = {}
  second_order = {}

  # Read the data.
  with open("data.txt") as f:
    for line in f:
      # Remove punctuation.
      line = remove_punctuation(line)

      # Split the line into words.
      words = line.split()

      # Update the transition probabilities.
      if len(words) == 0:
        continue
      elif len(words) == 1:
        initial[words[0]] = initial.get(words[0], 0) + 1
      else:
        first_order[words[0]] = first_order.get(words[0], 0) + 1
        second_order[(words[0], words[1])] = second_order.get((words[0], words[1]), 0) + 1

  # Normalize the transition probabilities.
  for state in initial:
    initial[state] /= sum(initial.values())
  for state in first_order:
    first_order[state] /= sum(first_order.values())
  for state1, state2 in second_order:
    second_order[(state1, state2)] /= sum(second_order.values())

  # Return the trained model.
  return initial, first_order, second_order


def generate_text():
  """
  Generates text from the trained Markov chain model.

  Returns:
    The generated text.
  """

  # Get the initial state.
  state = np.random.choice(list(initial.keys()))

  # Generate text until we reach the end of the line.
  text = []
  while True:
    text.append(state)

    # Get the next state.
    next_state = np.random.choice(list(first_order.get(state, {})))

    # If the next state is the end of the line, break.
    if next_state == "":
      break

    state = next_state

  return " ".join(text)


if __name__ == "__main__":
  # Train the model.
  initial, first_order, second_order = train_model()

  # Generate text.
  for _ in range(10):
    print(generate_text())
