import tensorflow as tf

# Load the MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the data
x_train = x_train / 255.0
x_test = x_test / 255.0

# Create the neural network
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the neural network
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy', 'mae', 'mse', 'categorical_crossentropy'])


# Train the neural network
model.fit(x_train, y_train, epochs=10)

# Evaluate the neural network
model.evaluate(x_test, y_test)

# Print the confusion matrix
confusion_matrix = tf.math.confusion_matrix(y_test, model.predict(x_test))
print(confusion_matrix)
