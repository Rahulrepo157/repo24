import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense


def cifar10_cnn():
  model = Sequential()

  # First convolutional layer
  model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))

  # First max pooling layer
  model.add(MaxPooling2D(pool_size=(2, 2)))

  # Second convolutional layer
  model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))

  # Second max pooling layer
  model.add(MaxPooling2D(pool_size=(2, 2)))

  # Flatten the convolutional layers
  model.add(Flatten())

  # Fully connected layer
  model.add(Dense(128, activation='relu'))

  # Output layer
  model.add(Dense(10, activation='softmax'))

  return model


if __name__ == "__main__":
  # Load the CIFAR-10 dataset
  (train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()

  # Preprocess the images
  train_images = train_images.astype('float32')
  test_images = test_images.astype('float32')
  train_images /= 255.0
  test_images /= 255.0

  # Create the model
  model = cifar10_cnn()

  # Compile the model
  model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

  # Train the model
  model.fit(train_images, train_labels, epochs=10)

  # Evaluate the model
  test_loss, test_accuracy = model.evaluate(test_images, test_labels)
  print('Test loss:', test_loss)
  print('Test accuracy:', test_accuracy)
